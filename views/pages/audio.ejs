<!DOCTYPE html>
<html>

<head>
    <title>Les particules de la creation</title>
    <link rel="stylesheet" href="style.css">
</head>

<body>
    <div class="container">
        <div class="center">
            <div style="margin-top: 30vh;">
                <h5 class="textIntro">
                    <p>Audio Analyzer</p>
                </h5>
            </div>
            <label for="file-upload" class="custom-file-upload">
                Audio File
            </label>
            <input id="file-upload" type="file" />

            <button class="start" onclick="start()" id="Start" disabled>Start</button>
            <br><br><br>
             <label style="display: inline-block;" class="informations"><input type="checkbox" id="antialiasing" name="checkbox">Antialiasing</label>
            <br><br>

            <p class="informations"><b>Mouse : </b>Control the camera<br><b>SPACE :</b> Pause the song<br><b>F11 :</b> Fullscreen and no fullscreen<br><b>Enter :</b> Back here</p>
        </div>
    </div>
    <div class="pause">
            <div class="center">
                <div style="margin-top: 30vh;">
                    <p>PAUSE</p>
                </div>
            </div>
    </div>



    <script src="three.min.js"></script>
    <script src="OBJLoader.js"></script> 
    <script src="MTLLoader.js"></script> 
    <script src="DDSLoader.js"></script>
    <script src="OrbitControls.js"></script>

    <script src="http://code.jquery.com/jquery-1.11.1.min.js"></script>
    <script type="text/javascript">
        var camera, scene, renderer;
        var geometry, material, mesh;
        var particleSystem;
        var data;
        var analyser;
        var arraydata;
        var path;
        var start;
        var sound;
        var isStop = false;
        var blueRotate = "plus";
        var orangeRotate = "minus";
        var pinkRotate = "plus";
        var come="false";
        var newaction = false;
        var astronaut;

        $("#file-upload").change(function () {
            console.log(this.files)


            // generate a new FileReader object
            var reader = new FileReader();

            // inject an image with the src url
            reader.onload = function (event) {
                path = event.target.result;
                $('.start').prop('disabled', false);
            }

            reader.readAsDataURL(this.files[0]);

        });

        function start() {
            $(".container").fadeOut("slow", function () {
                $('.container').css('display', 'none');

            });

            $('body').keyup(function (e) {
                if (e.keyCode == 32) {
                    newaction = true;
                    if (isStop == false) {
                        isStop = true;
                        $('.pause').css('display', 'block');
                    }
                    else {
                        isStop = false;
                        $('.pause').css('display', 'none');
                    }
                }
                if (e.keyCode == 13) {
                    location.reload();
                }
            });



            start = true;
            init();
            animate();


        }

        function init() {
            camera = new THREE.PerspectiveCamera(70, window.innerWidth / window.innerHeight, 1, 1100);
            camera.position.z = 550;
            var pointLight = new THREE.PointLight( 0xcccccc, 0.8 );
            pointLight.position.y += 50;
            pointLight.position.z += -10;
            camera.add( pointLight );

            var controls = new THREE.OrbitControls( camera );
            controls.maxDistance = 550;
            controls.enablePan = false;
            controls.update();

            scene = new THREE.Scene();

            var ambientLight = new THREE.AmbientLight( 0xffffff, 0.4 );
                scene.add( ambientLight );
                scene.add( camera )


            var particleCount1 = 3000,
                particles1 = new THREE.Geometry(),
                pMaterial1 = new THREE.PointsMaterial({
                    color: 0xFFFFFF,
                    size: 1,
                    map: new THREE.TextureLoader().load("flashBlue.png"),
                    transparent: true,
                    depthWrite: false,
                    blending: THREE.AdditiveBlending,
                });
            // now create the individual particles
            for (var p = 0; p < particleCount1; p++) {

                var pX = Math.random() * 300 - 150,
                    pY = Math.random() * 300 - 150,
                    pZ = Math.random() * 300 - 150,
                    particle1 =
                        new THREE.Vector3(pX, pY, pZ);

                // add it to the geometry
                particles1.vertices.push(particle1);
            }

            particleSystem1 = new THREE.Points(
                particles1,
                pMaterial1);

            particleSystem1.sortParticles = true;

            scene.add(particleSystem1);


            var particleCount2 = 2000,
                particles2 = new THREE.Geometry(),
                pMaterial2 = new THREE.PointsMaterial({
                    color: 0xFFFFFF,
                    size: 1,
                    map: new THREE.TextureLoader().load('flashOrange.png'),
                    transparent: true,
                    depthWrite: false,
                    depthTest:true,
                    blending: THREE.AdditiveBlending,
                });
            // now create the individual particles
            for (var p = 0; p < particleCount2; p++) {

                var pX = Math.random() * 200 - 100,
                    pY = Math.random() * 200 - 100,
                    pZ = Math.random() * 200 - 100,
                    particle2 =
                        new THREE.Vector3(pX, pY, pZ);

                // add it to the geometry
                particles2.vertices.push(particle2);
            }

            particleSystem2 = new THREE.Points(
                particles2,
                pMaterial2);

            particleSystem2.sortParticles = true;

            scene.add(particleSystem2);

            var particleCount3 = 50,
                particles3 = new THREE.Geometry(),
                pMaterial3 = new THREE.PointsMaterial({
                    color: 0xFFFFFF,
                    size: 1,
                    map: new THREE.TextureLoader().load('flashPink.png'),
                    transparent: true,
                    depthWrite: false,
                    blending: THREE.AdditiveBlending,
                });
            // now create the individual particles
            for (var p = 0; p < particleCount3; p++) {

                var pX = Math.random() * 100 - 50,
                    pY = Math.random() * 100 - 50,
                    pZ = Math.random() * 100 - 50,
                    particle3 =
                        new THREE.Vector3(pX, pY, pZ);

                // add it to the geometry
                particles3.vertices.push(particle3);
            }

            particleSystem3 = new THREE.Points(
                particles3,
                pMaterial3);

            particleSystem3.sortParticles = true;

            scene.add(particleSystem3);

            // Add background
            var geometry = new THREE.SphereBufferGeometry( 500, 60, 40 );
            // invert the geometry on the x-axis so that all of the faces point inward
            geometry.scale( - 1, 1, 1 );
            var material = new THREE.MeshBasicMaterial( {
                map: new THREE.TextureLoader().load( 'background.jpg' )
            } );
            mesh = new THREE.Mesh( geometry, material );
            scene.add( mesh );


            // create an AudioListener and add it to the camera
            var listener = new THREE.AudioListener();
            camera.add(listener);

            // create an Audio source
            sound = new THREE.Audio(listener);

            // load a sound and set it as the Audio object's buffer
            var audioLoader = new THREE.AudioLoader();
            audioLoader.load(path, function (buffer) {
                sound.setBuffer(buffer);
                sound.setLoop(false);
                sound.setVolume(0.5);
                sound.play();
            });

            // create an AudioAnalyser, passing in the sound and desired fftSize
            analyser = new THREE.AudioAnalyser(sound, 32);

            // get the average frequency of the sound
            data = analyser.getAverageFrequency();


            function rotateObject(object,degreeX=0, degreeY=0, degreeZ=0){

               degreeX = (degreeX * Math.PI)/180;
               degreeY = (degreeY * Math.PI)/180;
               degreeZ = (degreeZ * Math.PI)/180;

               object.rotateX(degreeX);
               object.rotateY(degreeY);
               object.rotateZ(degreeZ);

            }
            // model
                var onProgress = function ( xhr ) {
                    if ( xhr.lengthComputable ) {
                        var percentComplete = xhr.loaded / xhr.total * 100;
                        console.log( Math.round(percentComplete, 2) + '% downloaded' );
                    }
                };

                var onError = function ( xhr ) { };
                THREE.Loader.Handlers.add( /\.dds$/i, new THREE.DDSLoader() );
                var mtlLoader = new THREE.MTLLoader();
                mtlLoader.setPath( 'obj/' );
                mtlLoader.load( 'redlegodude-2.mtl', function( materials ) {
                    materials.preload();
                    var objLoader = new THREE.OBJLoader();
                    objLoader.setMaterials( materials );
                    objLoader.setPath( 'obj/' );
                    objLoader.load( 'redlegodude-2.obj', function ( object ) {
                        object.position.z = 0;
                        object.scale.set( 300, 300, 300);

                        scene.add( object );
                        astronaut = object;
                    }, onProgress, onError );
                });

            //Antialiasing
            if ($('#antialiasing').is(":checked")){
                renderer = new THREE.WebGLRenderer({ alpha: true, premultipliedAlpha: false, antialias:true  });
            }
            else{
                renderer = new THREE.WebGLRenderer({ alpha: true, premultipliedAlpha: false});
            }

            renderer.setClearColor(0x000000, 0);
            renderer.setSize(window.innerWidth, window.innerHeight);
            document.body.appendChild(renderer.domElement);

        }

        function animate() {


            // add some rotation to the system

            arraydata = analyser.getFrequencyData();

            // Blue particles rotation & sizing
            if (blueRotate == "plus") {
                particleSystem1.rotation.y += arraydata[1] / 15000;
                particleSystem1.rotation.x -= arraydata[1] / 20000;
            }

            if (blueRotate == "minus") {
                particleSystem1.rotation.y -= arraydata[1] / 15000;
                particleSystem1.rotation.x += arraydata[1] / 20000;
            }

            if (arraydata[1] >= 235 && particleSystem1['material'].size <= 7) {
                particleSystem1['material'].size += 1;
                if (particleSystem1['material'].size == 7)
                    blueRotate = "minus"
            }
            else {
                if (particleSystem1['material'].size > 1)
                    particleSystem1['material'].size -= 1;
                if (particleSystem1['material'].size == 1)
                    blueRotate = "plus"
            }

            // Orange particles rotation & sizing
            if (orangeRotate == "plus") {
                particleSystem2.rotation.y += arraydata[4] / 10000;
            }

            if (orangeRotate == "minus") {
                particleSystem2.rotation.y -= arraydata[4] / 10000;
            }

            if (arraydata[4] >= 170 && particleSystem2['material'].size <= 8) {

                particleSystem2['material'].size += 1;
                if (particleSystem2['material'].size == 8)
                    orangeRotate = "plus"
            }
            else {
                if (particleSystem2['material'].size > 1)
                    particleSystem2['material'].size -= 1;
                if (particleSystem2['material'].size == 1)
                    orangeRotate = "minus"
            }
            
            // Pink particles rotation & sizing
            if (pinkRotate == "plus") {
                particleSystem3.rotation.y += arraydata[6] / 10000;
            }

            if (pinkRotate == "minus") {
                particleSystem3.rotation.y -= arraydata[6] / 10000;
            }

            if (arraydata[6] >= 140 && particleSystem3['material'].size <= 12) {
                particleSystem3['material'].size += 1;
                if (particleSystem3['material'].size == 12)
                    pinkRotate = "minus"
            }
            else {
                if (particleSystem3['material'].size > 1)
                    particleSystem3['material'].size -= 1;
                if (particleSystem3['material'].size == 1)
                    pinkRotate = "plus"
            }


            if (typeof astronaut != 'undefined'){
            
                if(arraydata[0] != 0 || arraydata[1] != 0 || arraydata[2] != 0 || arraydata[3] != 0 || arraydata[4] != 0 || arraydata[5] != 0){

                     if(come == "true" ) {
                        astronaut.position.z -= 0.10;
                        astronaut.rotation.y -= arraydata[6] / 10000;
                        astronaut.rotation.x -= arraydata[1] / 10000;
                    }
                    if (come == "false"){
                        astronaut.position.z += 0.10;
                        astronaut.rotation.y += arraydata[1] / 10000;
                        astronaut.rotation.x += arraydata[6] / 10000;
                    }
                    if(astronaut.position.z >= 200){
                        come="true";
                    }
                    if(astronaut.position.z <= -200){
                        come="false";
                    }
                    //Background 360
                    mesh.rotation.y += 0.001 ;

                }
      
            }

            if (newaction) {
                if (isStop == true) {
                    sound.pause();
                }
                else {
                    sound.play();

                }
                newaction = false;
            }

            // draw
            renderer.render(scene, camera);

            // set up the next call
            requestAnimationFrame(animate);


        }

        window.addEventListener('resize', onWindowResize, false);

        function onWindowResize() {

            if (start == true) {

                camera.aspect = window.innerWidth / window.innerHeight;
                camera.updateProjectionMatrix();

                renderer.setSize(window.innerWidth, window.innerHeight);
            }

        }
    </script>
    
</body>

</html>